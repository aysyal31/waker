#!/usr/bin/env ruby
require_relative '../config/environment'

logger = Logger.new(STDOUT)

while true
  begin
    logger.debug 'Start escalation phase.'

    EscalationQueue.where('escalate_at < ?', Time.now).each do |job|
      case job.escalation.escalate_to
      when User
        escalate_to = job.escalation.escalate_to
      else
        logger.error 'Invalid escalate_to'
      end

      logger.debug "#{job.incident} is going to be escalated to #{escalate_to}"

      # add job to notification queue
      current_time = Time.now
      escalate_to.notifiers.each do |notifier|
        NotificationQueue.create!(
          notifier: notifier,
          incident: job.incident,
          notify_at: current_time + notifier.notify_after,
        )
      end

      job.destroy
    end

    logger.debug 'Start notification phase.'

    # fetch jobs from notification queue and notify it
    NotificationQueue.where('notify_at < ?', Time.now).each do |job|
      logger.debug "#{job.notifier} is notifying #{job.incident}"
      job.notifier.notify(job.incident)

      job.destroy
    end

  rescue => err
    backtrace = err.backtrace.join("\n")
    logger.error "#{err}\n#{backtrace}"
  end

  sleep 10
end

